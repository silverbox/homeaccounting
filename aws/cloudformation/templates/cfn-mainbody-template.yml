AWSTemplateFormatVersion: "2010-09-09"
Description: "Lambda for My Home Account"
Parameters:
  myhomeaccountgetbalanceContents:
    Type: String
    Default: |
      var response = require('cfn-response');
      exports.handler = function(event, context) {
         var responseData = {Value: event.ResourceProperties.List};
         responseData.Value.push(event.ResourceProperties.AppendedItem);
         response.send(event, context, response.SUCCESS, responseData);
      };
  myhomeaccountgetkindmstContents:
    Type: String
    Default: |
      var response = require('cfn-response');
      exports.handler = function(event, context) {
         var responseData = {Value: event.ResourceProperties.List};
         responseData.Value.push(event.ResourceProperties.AppendedItem);
         response.send(event, context, response.SUCCESS, responseData);
      };
  myhomeaccountgetslipContents:
    Type: String
    Default: |
      var response = require('cfn-response');
      exports.handler = function(event, context) {
         var responseData = {Value: event.ResourceProperties.List};
         responseData.Value.push(event.ResourceProperties.AppendedItem);
         response.send(event, context, response.SUCCESS, responseData);
      };
  myhomeaccountpostbalanceContents:
    Type: String
    Default: |
      var response = require('cfn-response');
      exports.handler = function(event, context) {
         var responseData = {Value: event.ResourceProperties.List};
         responseData.Value.push(event.ResourceProperties.AppendedItem);
         response.send(event, context, response.SUCCESS, responseData);
      };
  myhomeaccountpostslipContents:
    Type: String
    Default: |
      var response = require('cfn-response');
      exports.handler = function(event, context) {
         var responseData = {Value: event.ResourceProperties.List};
         responseData.Value.push(event.ResourceProperties.AppendedItem);
         response.send(event, context, response.SUCCESS, responseData);
      };
  myhomeaccountgetchartContents:
    Type: String
    Default: |
      var response = require('cfn-response');
      exports.handler = function(event, context) {
         var responseData = {Value: event.ResourceProperties.List};
         responseData.Value.push(event.ResourceProperties.AppendedItem);
         response.send(event, context, response.SUCCESS, responseData);
      };
#  LambdaSubnetIds:
#    Description: Subnet ids for lambda VPC config
#    Type: String
#  LambdaSecurityGroupIds:
#    Description: Security group ids for lambda VPC config
#    Type: String
Resources:
  Rolemyhomeaccount:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "role-myhome-account"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: "policy-myhome-account"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - cloudwatch:GetMetricStatistics
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:GetRecords
                - dynamodb:GetItem
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource:
                - "arn:aws:dynamodb:ap-northeast-1:999999999999:table/account_*"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
            - Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - "arn:aws:sns:ap-northeast-1:999999999999:myhome-account-failure-notification"
  LAMBDAmyhomeaccountmyhomeaccountgetbalance:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "myhome-account-get-balance"
      Handler: "myhome-account-get-balance.lambda_handler"
      Runtime: "python3.7"
      Timeout: "5"
      Role: !GetAtt Rolemyhomeaccount.Arn
#      VpcConfig:
#        SecurityGroupIds:
#          - !Ref LambdaSecurityGroupIds
#        SubnetIds:
#          - !Ref LambdaSubnetIds
      Code: 
        ZipFile: !Ref myhomeaccountgetbalanceContents
      Tags:
        - Key: Name
          Value: "myhome-account-myhome-account-get-balance"

        - Key: Description
          Value: "Get Account balance"
  LOGGROUPmyhomeaccountmyhomeaccountgetbalance:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/myhome-account-get-balance
      RetentionInDays: "30"
  LAMBDAmyhomeaccountmyhomeaccountgetkindmst:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "myhome-account-get-kindmst"
      Handler: "myhome-account-get-kindmst.lambda_handler"
      Runtime: "python3.7"
      Timeout: "5"
      Role: !GetAtt Rolemyhomeaccount.Arn
#      VpcConfig:
#        SecurityGroupIds:
#          - !Ref LambdaSecurityGroupIds
#        SubnetIds:
#          - !Ref LambdaSubnetIds
      Code: 
        ZipFile: !Ref myhomeaccountgetkindmstContents
      Tags:
        - Key: Name
          Value: "myhome-account-myhome-account-get-kindmst"

        - Key: Description
          Value: "Get Account KindMst"
  LOGGROUPmyhomeaccountmyhomeaccountgetkindmst:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/myhome-account-get-kindmst
      RetentionInDays: "30"
  LAMBDAmyhomeaccountmyhomeaccountgetslip:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "myhome-account-get-slip"
      Handler: "myhome-account-get-slip.lambda_handler"
      Runtime: "python3.7"
      Timeout: "5"
      Role: !GetAtt Rolemyhomeaccount.Arn
#      VpcConfig:
#        SecurityGroupIds:
#          - !Ref LambdaSecurityGroupIds
#        SubnetIds:
#          - !Ref LambdaSubnetIds
      Code: 
        ZipFile: !Ref myhomeaccountgetslipContents
      Tags:
        - Key: Name
          Value: "myhome-account-myhome-account-get-slip"

        - Key: Description
          Value: "Get Account Slip"
  LOGGROUPmyhomeaccountmyhomeaccountgetslip:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/myhome-account-get-slip
      RetentionInDays: "30"
  LAMBDAmyhomeaccountmyhomeaccountpostbalance:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "myhome-account-post-balance"
      Handler: "myhome-account-post-balance.lambda_handler"
      Runtime: "python3.7"
      Timeout: "5"
      Role: !GetAtt Rolemyhomeaccount.Arn
#      VpcConfig:
#        SecurityGroupIds:
#          - !Ref LambdaSecurityGroupIds
#        SubnetIds:
#          - !Ref LambdaSubnetIds
      Code: 
        ZipFile: !Ref myhomeaccountpostbalanceContents
      Tags:
        - Key: Name
          Value: "myhome-account-myhome-account-post-balance"

        - Key: Description
          Value: "Post Account balance"
  LOGGROUPmyhomeaccountmyhomeaccountpostbalance:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/myhome-account-post-balance
      RetentionInDays: "30"
  LAMBDAmyhomeaccountmyhomeaccountpostslip:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "myhome-account-post-slip"
      Handler: "myhome-account-post-slip.lambda_handler"
      Runtime: "python3.7"
      Timeout: "5"
      Role: !GetAtt Rolemyhomeaccount.Arn
#      VpcConfig:
#        SecurityGroupIds:
#          - !Ref LambdaSecurityGroupIds
#        SubnetIds:
#          - !Ref LambdaSubnetIds
      Code: 
        ZipFile: !Ref myhomeaccountpostslipContents
      Tags:
        - Key: Name
          Value: "myhome-account-myhome-account-post-slip"

        - Key: Description
          Value: "Post Account slip"
  LOGGROUPmyhomeaccountmyhomeaccountpostslip:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/myhome-account-post-slip
      RetentionInDays: "30"
  LAMBDAmyhomeaccountmyhomeaccountgetchart:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "myhome-account-get-chart"
      Handler: "myhome-account-get-chart.lambda_handler"
      Runtime: "python3.7"
      Timeout: "5"
      Role: !GetAtt Rolemyhomeaccount.Arn
#      VpcConfig:
#        SecurityGroupIds:
#          - !Ref LambdaSecurityGroupIds
#        SubnetIds:
#          - !Ref LambdaSubnetIds
      Code: 
        ZipFile: !Ref myhomeaccountgetchartContents
      Tags:
        - Key: Name
          Value: "myhome-account-myhome-account-get-chart"

        - Key: Description
          Value: "Get Chart Struct"
  LOGGROUPmyhomeaccountmyhomeaccountgetchart:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/myhome-account-get-chart
      RetentionInDays: "30"
  APIGatewaymyhomeaccount:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "apigw-myhome-account"
  APIGatewayMethodmyhomeaccount:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - APIGatewaymyhomeaccount
    Properties:
      HttpMethod: POST
      ResourceId: !GetAtt APIGatewaymyhomeaccount.RootResourceId
      RestApiId: !Ref APIGatewaymyhomeaccount
      AuthorizationType: NONE
      Integration:
        Type: MOCK
  APIGatewayEmptyDeploymyhomeaccount:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIGatewayMethodmyhomeaccount
    Properties: 
      Description: "empty deploy"
      RestApiId: !Ref APIGatewaymyhomeaccount
  APIGatewayClientCertificatemyhomeaccount:
    Type: AWS::ApiGateway::ClientCertificate
    Properties:
      Description: "Client certificate for myhome-account"
  APIGatewayStagemyhomeaccountdev:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - APIGatewayEmptyDeploymyhomeaccount
      - APIGatewayClientCertificatemyhomeaccount 
    Properties:
      Description: "developing"
      StageName: "dev"
      RestApiId: !Ref APIGatewaymyhomeaccount
      DeploymentId: !Ref APIGatewayEmptyDeploymyhomeaccount
      ClientCertificateId: !Ref APIGatewayClientCertificatemyhomeaccount
  APIGatewayLOGGROUPmyhomeaccountdev:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - APIGatewayStagemyhomeaccountdev
    Properties: 
      LogGroupName: !Join 
        - ""
        - - "API-Gateway-Execution-Logs_"
          - !Ref APIGatewaymyhomeaccount
          - "/dev"
      RetentionInDays: "30"
  APIGatewayStagemyhomeaccountproduction:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - APIGatewayEmptyDeploymyhomeaccount
      - APIGatewayClientCertificatemyhomeaccount 
    Properties:
      Description: "production"
      StageName: "production"
      RestApiId: !Ref APIGatewaymyhomeaccount
      DeploymentId: !Ref APIGatewayEmptyDeploymyhomeaccount
      ClientCertificateId: !Ref APIGatewayClientCertificatemyhomeaccount
  APIGatewayLOGGROUPmyhomeaccountproduction:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - APIGatewayStagemyhomeaccountproduction
    Properties: 
      LogGroupName: !Join 
        - ""
        - - "API-Gateway-Execution-Logs_"
          - !Ref APIGatewaymyhomeaccount
          - "/production"
      RetentionInDays: "30"
  APIGatewayKeymyhomeaccount:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - APIGatewayStagemyhomeaccountdev
      - APIGatewayStagemyhomeaccountproduction
    Properties: 
      Name: "apigw-myhome-account-key"
      Enabled: true
      StageKeys: 
        - RestApiId: !Ref APIGatewaymyhomeaccount
          StageName: "dev"
        - RestApiId: !Ref APIGatewaymyhomeaccount
          StageName: "production"
  APIGatewayUsagePlanmyhomeaccount:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - APIGatewayStagemyhomeaccountdev
      - APIGatewayStagemyhomeaccountproduction
    Properties:
      ApiStages:
      - ApiId:
          Ref: APIGatewaymyhomeaccount
        Stage: "dev"
      - ApiId:
          Ref: APIGatewaymyhomeaccount
        Stage: "production"
      Throttle:
        BurstLimit: "10"
        RateLimit: "10"
      UsagePlanName: "apigw-myhome-account-usageplan"
  APIGatewayUsagePlanKeymyhomeaccount:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - APIGatewayKeymyhomeaccount
      - APIGatewayUsagePlanmyhomeaccount
    Properties : 
      KeyId: !Ref APIGatewayKeymyhomeaccount
      KeyType: API_KEY
      UsagePlanId: !Ref APIGatewayUsagePlanmyhomeaccount
